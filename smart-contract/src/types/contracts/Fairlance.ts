/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace Fairlance {
  export type JobStruct = {
    id: BigNumberish;
    title: string;
    description: string;
    deadline: BigNumberish;
    minimumPrice: BigNumberish;
    maximumPrice: BigNumberish;
    inProgress: boolean;
    isDone: boolean;
    owner: AddressLike;
  };

  export type JobStructOutput = [
    id: bigint,
    title: string,
    description: string,
    deadline: bigint,
    minimumPrice: bigint,
    maximumPrice: bigint,
    inProgress: boolean,
    isDone: boolean,
    owner: string
  ] & {
    id: bigint;
    title: string;
    description: string;
    deadline: bigint;
    minimumPrice: bigint;
    maximumPrice: bigint;
    inProgress: boolean;
    isDone: boolean;
    owner: string;
  };

  export type ProposalStruct = {
    id: BigNumberish;
    jobId: BigNumberish;
    sender: AddressLike;
    cost: BigNumberish;
    details: string;
    expectedFinishDate: BigNumberish;
  };

  export type ProposalStructOutput = [
    id: bigint,
    jobId: bigint,
    sender: string,
    cost: bigint,
    details: string,
    expectedFinishDate: bigint
  ] & {
    id: bigint;
    jobId: bigint;
    sender: string;
    cost: bigint;
    details: string;
    expectedFinishDate: bigint;
  };
}

export interface FairlanceInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "acceptProposal"
      | "balances"
      | "completeJob"
      | "deposit"
      | "getJobById"
      | "jobIdToJob"
      | "onholdBalances"
      | "owner"
      | "postJob"
      | "proposalIdToProposal"
      | "releaseOnHoldBalance"
      | "renounceOwnership"
      | "sendProposal"
      | "transfer"
      | "transferOwnership"
      | "withdraw"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "Deposit"
      | "JobPosted"
      | "OwnershipTransferred"
      | "ProposalSent"
      | "Transfer"
      | "Withdrawal"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "acceptProposal",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "balances",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "completeJob",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "deposit", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getJobById",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "jobIdToJob",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "onholdBalances",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "postJob",
    values: [string, string, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "proposalIdToProposal",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "releaseOnHoldBalance",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "sendProposal",
    values: [BigNumberish, BigNumberish, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "acceptProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "balances", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "completeJob",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getJobById", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "jobIdToJob", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "onholdBalances",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "postJob", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "proposalIdToProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "releaseOnHoldBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sendProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
}

export namespace DepositEvent {
  export type InputTuple = [sender: AddressLike, amount: BigNumberish];
  export type OutputTuple = [sender: string, amount: bigint];
  export interface OutputObject {
    sender: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace JobPostedEvent {
  export type InputTuple = [job: Fairlance.JobStruct];
  export type OutputTuple = [job: Fairlance.JobStructOutput];
  export interface OutputObject {
    job: Fairlance.JobStructOutput;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProposalSentEvent {
  export type InputTuple = [proposal: Fairlance.ProposalStruct];
  export type OutputTuple = [proposal: Fairlance.ProposalStructOutput];
  export interface OutputObject {
    proposal: Fairlance.ProposalStructOutput;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransferEvent {
  export type InputTuple = [
    sender: AddressLike,
    receiver: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [sender: string, receiver: string, amount: bigint];
  export interface OutputObject {
    sender: string;
    receiver: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WithdrawalEvent {
  export type InputTuple = [receiver: AddressLike, amount: BigNumberish];
  export type OutputTuple = [receiver: string, amount: bigint];
  export interface OutputObject {
    receiver: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Fairlance extends BaseContract {
  connect(runner?: ContractRunner | null): Fairlance;
  waitForDeployment(): Promise<this>;

  interface: FairlanceInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  acceptProposal: TypedContractMethod<
    [_proposalId: BigNumberish],
    [void],
    "nonpayable"
  >;

  balances: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  completeJob: TypedContractMethod<
    [_jobId: BigNumberish],
    [void],
    "nonpayable"
  >;

  deposit: TypedContractMethod<[], [void], "payable">;

  getJobById: TypedContractMethod<
    [_id: BigNumberish],
    [Fairlance.JobStructOutput],
    "view"
  >;

  jobIdToJob: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        bigint,
        string,
        string,
        bigint,
        bigint,
        bigint,
        boolean,
        boolean,
        string
      ] & {
        id: bigint;
        title: string;
        description: string;
        deadline: bigint;
        minimumPrice: bigint;
        maximumPrice: bigint;
        inProgress: boolean;
        isDone: boolean;
        owner: string;
      }
    ],
    "view"
  >;

  onholdBalances: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  postJob: TypedContractMethod<
    [
      _title: string,
      _description: string,
      _deadline: BigNumberish,
      _minimumPrice: BigNumberish,
      _maximumPrice: BigNumberish
    ],
    [void],
    "payable"
  >;

  proposalIdToProposal: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, bigint, string, bigint, string, bigint] & {
        id: bigint;
        jobId: bigint;
        sender: string;
        cost: bigint;
        details: string;
        expectedFinishDate: bigint;
      }
    ],
    "view"
  >;

  releaseOnHoldBalance: TypedContractMethod<
    [_jobId: BigNumberish],
    [void],
    "nonpayable"
  >;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  sendProposal: TypedContractMethod<
    [
      _jobId: BigNumberish,
      _cost: BigNumberish,
      _details: string,
      expectedFinishDate: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  transfer: TypedContractMethod<
    [receiver: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  withdraw: TypedContractMethod<[amount: BigNumberish], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "acceptProposal"
  ): TypedContractMethod<[_proposalId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "balances"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "completeJob"
  ): TypedContractMethod<[_jobId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "deposit"
  ): TypedContractMethod<[], [void], "payable">;
  getFunction(
    nameOrSignature: "getJobById"
  ): TypedContractMethod<
    [_id: BigNumberish],
    [Fairlance.JobStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "jobIdToJob"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        bigint,
        string,
        string,
        bigint,
        bigint,
        bigint,
        boolean,
        boolean,
        string
      ] & {
        id: bigint;
        title: string;
        description: string;
        deadline: bigint;
        minimumPrice: bigint;
        maximumPrice: bigint;
        inProgress: boolean;
        isDone: boolean;
        owner: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "onholdBalances"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "postJob"
  ): TypedContractMethod<
    [
      _title: string,
      _description: string,
      _deadline: BigNumberish,
      _minimumPrice: BigNumberish,
      _maximumPrice: BigNumberish
    ],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "proposalIdToProposal"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, bigint, string, bigint, string, bigint] & {
        id: bigint;
        jobId: bigint;
        sender: string;
        cost: bigint;
        details: string;
        expectedFinishDate: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "releaseOnHoldBalance"
  ): TypedContractMethod<[_jobId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "sendProposal"
  ): TypedContractMethod<
    [
      _jobId: BigNumberish,
      _cost: BigNumberish,
      _details: string,
      expectedFinishDate: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transfer"
  ): TypedContractMethod<
    [receiver: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "withdraw"
  ): TypedContractMethod<[amount: BigNumberish], [void], "nonpayable">;

  getEvent(
    key: "Deposit"
  ): TypedContractEvent<
    DepositEvent.InputTuple,
    DepositEvent.OutputTuple,
    DepositEvent.OutputObject
  >;
  getEvent(
    key: "JobPosted"
  ): TypedContractEvent<
    JobPostedEvent.InputTuple,
    JobPostedEvent.OutputTuple,
    JobPostedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "ProposalSent"
  ): TypedContractEvent<
    ProposalSentEvent.InputTuple,
    ProposalSentEvent.OutputTuple,
    ProposalSentEvent.OutputObject
  >;
  getEvent(
    key: "Transfer"
  ): TypedContractEvent<
    TransferEvent.InputTuple,
    TransferEvent.OutputTuple,
    TransferEvent.OutputObject
  >;
  getEvent(
    key: "Withdrawal"
  ): TypedContractEvent<
    WithdrawalEvent.InputTuple,
    WithdrawalEvent.OutputTuple,
    WithdrawalEvent.OutputObject
  >;

  filters: {
    "Deposit(address,uint256)": TypedContractEvent<
      DepositEvent.InputTuple,
      DepositEvent.OutputTuple,
      DepositEvent.OutputObject
    >;
    Deposit: TypedContractEvent<
      DepositEvent.InputTuple,
      DepositEvent.OutputTuple,
      DepositEvent.OutputObject
    >;

    "JobPosted(tuple)": TypedContractEvent<
      JobPostedEvent.InputTuple,
      JobPostedEvent.OutputTuple,
      JobPostedEvent.OutputObject
    >;
    JobPosted: TypedContractEvent<
      JobPostedEvent.InputTuple,
      JobPostedEvent.OutputTuple,
      JobPostedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "ProposalSent(tuple)": TypedContractEvent<
      ProposalSentEvent.InputTuple,
      ProposalSentEvent.OutputTuple,
      ProposalSentEvent.OutputObject
    >;
    ProposalSent: TypedContractEvent<
      ProposalSentEvent.InputTuple,
      ProposalSentEvent.OutputTuple,
      ProposalSentEvent.OutputObject
    >;

    "Transfer(address,address,uint256)": TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;
    Transfer: TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;

    "Withdrawal(address,uint256)": TypedContractEvent<
      WithdrawalEvent.InputTuple,
      WithdrawalEvent.OutputTuple,
      WithdrawalEvent.OutputObject
    >;
    Withdrawal: TypedContractEvent<
      WithdrawalEvent.InputTuple,
      WithdrawalEvent.OutputTuple,
      WithdrawalEvent.OutputObject
    >;
  };
}
